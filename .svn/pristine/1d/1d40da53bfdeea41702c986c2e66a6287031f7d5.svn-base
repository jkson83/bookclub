<!DOCTYPE html>
<html lang="en" >
<head>
  <meta charset="UTF-8">
  <title>Memory Card Game</title>
  <meta name="description" content="">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="stylesheet prefetch" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.6.1/css/font-awesome.min.css">
  <style>
    html {
    box-sizing: border-box;
}

*,
*::before,
*::after {
    box-sizing: inherit;
}

html,
body {
    width: 100%;
    height: 100%;
    margin: 0;
    padding: 0;
}

body {
    font-family: 'Coda', cursive;
}

.container {
    display: flex;
    justify-content: center;
    align-items: center;
    flex-direction: column;
}

h1 {
    font-family: 'Slackey', cursive;
    font-weight: 400;
    text-shadow: 2px 2px 22px rgba(105, 201, 125, 1);
    color: #00A486;
}

/*
 * Styles for the deck of cards
 */

.deck {
    width: 660px;
    min-height: 680px;
    background: linear-gradient(160deg, #02ccba 0%, #aa7ecd 100%);
    padding: 32px;
    border-radius: 10px;
    box-shadow: 12px 15px 20px 0 rgba(46, 61, 73, 0.5);
    display: flex;
    flex-wrap: wrap;
    justify-content: space-between;
    align-items: center;
    gap: 10px;
    margin: 0 0 3em;
}

.deck .card {
    height: 225px;
    width: calc(33% - 5px);
    background: #2e3d49;
    font-size: 0;
    color: #ffffff;
    border-radius: 8px;
    cursor: pointer;
    display: flex;
    justify-content: center;
    align-items: center;
    box-shadow: 5px 2px 20px 0 rgba(46, 61, 73, 0.5);
}


.deck .card.open {
    transform: rotateY(0);
    background: #02b3e4;
    cursor: default;
    animation-name: fadeIn;
    animation-duration: 0.3s;
}

.deck .card.show {
    font-size: 33px;
    pointer-events: none;
}

.deck .card.match {
  cursor: default;
  background: #02ccba;
  font-size: 33px;
  animation-duration: 0.3s;
  animation-name: bounceIn;
  opacity: 0;
}

.deck .card.show i {
}

.deck .card.shake {
  animation-duration: 0.5s;
  animation-name: shake;
}

/*
 * Styles for the Score Panel
 */

.score-panel {
    display: flex;
    justify-content: space-between;
    align-items: center;
    text-align: left;
    width: 660px;
}

.score-panel .stars {
    margin: 0;
    padding: 0;
    width: 25%;
    display: inline-block;
    margin: 0 10px 0 0;
}

.score-panel .stars li {
    list-style: none;
    display: inline-block;
}

.score-panel .stars .one{
    color: #00E120;
}

.score-panel .stars .two{
    color: #00AEE1;
}

.score-panel .stars .three{
    color: #EC8FFF;
    animation: hue-animation 3s infinite;
}

.score-panel .movesCounter {
  display: inline-block;
  width: 25%;
  color: #00A486;
  font-weight: 500;
}

.score-panel .timer {
  display: inline-block;
  width: 25%;
  margin-left:auto;
  padding-right:10px;
  text-align:right;
}

.score-panel .restart {
    float: right;
    cursor: pointer;
    font-size: 25px;
    color: #8AEAFF;
}

.score-panel .restart.active {
  pointer-events: none;
}


/*
 * Animations
*/
@keyframes bounceIn {
  from,
  20%,
  40%,
  60%,
  80%,
  to {
    animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);
  }

  0% {
    opacity: 0;
    transform: scale3d(0.3, 0.3, 0.3);
  }

  20% {
    transform: scale3d(1.1, 1.1, 1.1);
  }

  40% {
    transform: scale3d(0.9, 0.9, 0.9);
  }

  60% {
    opacity: 1;
    transform: scale3d(1.03, 1.03, 1.03);
  }

  80% {
    transform: scale3d(0.97, 0.97, 0.97);
  }

  to {
    opacity: 1;
    transform: scale3d(1, 1, 1);
  }
}

@keyframes hue-animation {
  0% {
    filter: hue-rotate(80deg);
  }
  20% {
    filter: hue-rotate(150deg);
  }
  40% {
    filter: hue-rotate(210deg);
  }
  60% {
    filter: hue-rotate(180deg);
  }
  60% {
    filter: hue-rotate(90deg);
  }
  60% {
    filter: hue-rotate(50deg);
  }
}

@keyframes shake {
  from,
  to {
    transform: translate3d(0, 0, 0);
  }

  10%,
  30%,
  50%,
  70%,
  90% {
    transform: translate3d(-10px, 0, 0);
  }

  20%,
  40%,
  60%,
  80% {
    transform: translate3d(10px, 0, 0);
  }
}

@keyframes fadeIn {
  from {
    opacity: 0;
  }

  to {
    opacity: 1;
  }
}
  </style>
</head>
<body>

    <div class="container">
        <header>
            <h1>Matching Game</h1>
        </header>

        <section class="score-panel">
            <div class="movesCounter"><span class="moves">0</span> Moves</div>

            <div class="timer"> </div>

            <div class="restart">
        		<i class="fa fa-repeat"></i>
        	</div>
        </section>

        <ul class="deck">
            <li class="card">
                <i>1</i>
            </li>
            <li class="card">
                <i>1</i>
            </li>
            <li class="card">
                <i>2</i>
            </li>
            <li class="card">
                <i>2</i>
            </li>
            <li class="card">
                <i>3</i>
            </li>
            <li class="card">
                <i>3</i>
            </li>
            <li class="card">
                <i>4</i>
            </li>
            <li class="card">
                <i>4</i>
            </li>
            <li class="card">
                <i>5</i>
            </li>
        </ul>

    </div>

    <!-- partial -->
    <script>
        /*
 * Create a list that holds all of your cards
 */
  let openCards = [];
  let card = document.getElementsByClassName('card');
  let cards = [...card];
  let movesCounter = document.querySelector('.moves');
  let deck = document.querySelector('.deck');
  let shuffledCards = [];
  let moves = 0;
  let match = 0;
  let sec = 0;
  let min = 0;
  let timeCounter = document.querySelector('.timer');
  let timer = '';
  let timerDelay = 0;
  let modal = document.querySelector('.modal');
  let stat = document.querySelector('.end-msg');
  let timerText = '';
  let modalMsg = '';
  let restart = document.querySelector('.restart');
  restart.addEventListener('click', restartGame);

/*
 * set up the event listener for a card. If a card is clicked:
 *  - display the card's symbol (put this functionality in another function that you call from this one)
 *  - add the card to a *list* of "open" cards (put this functionality in another function that you call from this one)
 *  - if the list already has another card, check to see if the two cards match
 *    + if the cards do match, lock the cards in the open position (put this functionality in another function that you call from this one)
 *    + if the cards do not match, remove the cards from the list and hide the card's symbol (put this functionality in another function that you call from this one)
 *    + increment the move counter and display it on the page (put this functionality in another function that you call from this one)
 *    + if all cards have matched, display a message with the final score (put this functionality in another function that you call from this one)
 */


 setDeck();

/**
 * Shuffle cards on deck and display face down
 * call to initialize moves at move-counter on webpage
 * call to start the game
 */
 function setDeck() {
   console.log("shuffle");
   shuffledCards = shuffle(cards);
   for(let i = 0; i < shuffledCards.length; i++) {
      deck.appendChild(shuffledCards[i]);
      shuffledCards[i].classList.remove('open','show','match','shake');
    }
    setMoves();
    setTimeout(function() {
      showFirst();
      setTimeout(function() {
        hideCards();
        startGame();
      },2000);
     },1000);
  }


  /**
   * showFirst - shows all the cards
   *
   * @param  card shuffled card list
   */
  function showFirst() {
    console.log("show");
    for(let i = 0; i < shuffledCards.length; i++) {
      shuffledCards[i].classList.add('open','show');
    }	
     
  }

  /**
   * hideCards - hides all the cards
   *
   * @param  card shuffled card list
   */
  function hideCards() {
    console.log("hide");
    for(let i = 0; i < shuffledCards.length; i++) {
      shuffledCards[i].classList.remove('open','show');
    }
  }


  /**
   * Sets move counter to current moves done
   */
  function setMoves() {
    movesCounter.textContent = moves++;
  }


 /**
  * Game starts when a card is clicked
  */

 function startGame() {
   for(let i = 0; i < cards.length; i++) {
     shuffledCards[i].addEventListener('click', flipCardUp);
   }
 }


 /**
  * Shows card-symbol at click
  * Adds card to openCards list
  * If it's first card - start timer
  * If there are 2 cards on list - call to compare symbols
  * If all cards are matched, call to end game
  * @param  {type} event clicked card
  */

 function flipCardUp(event) {
   event.target.classList.remove('shake');
   showCard(event);
   addToOpenCards(event.target);
   timerDelay++;

   if(timerDelay === 1) {
     startTimer();
   }

   if(openCards.length === 2) {
     let prev = openCards[0];
     let curr = openCards[1];
     checkMatch(prev,curr);
   }

   if(card.length%2 == 0){
    if(match === card.length/2) {
      endGame();
    } 
  }
  if(card.length%2 == 1){
     if(match === Math.floor(card.length/2)) {
       endGame();
     } 
   }
 }


 /**
  * Checks the symbol of current and previous cards from list
  * If match - call to change card style
  * If not a match - call to flip card down
  * Afterwards, call to increment moves and check star rating-status
  * Reset openCards list
  * @param  {type} prev 1st card on list
  * @param  {type} curr 2nd card of list
  */
 function checkMatch(prev,curr) {
    if(prev.innerHTML === curr.innerHTML)  {
      	isMatch(prev,curr);
    }
    else {
 			notMatch(prev,curr);
    }

   incrementMoves();
   openCards = [];
  }



 	/**
 	 * Lock card in open position and change styles
 	 * Increment match number
   * @param  {type} prev 1st card on list
   * @param  {type} curr 2nd card of list
 	 */
 	function isMatch(prev,curr) {
 		prev.classList.add('match');
    curr.classList.add('match');
    match++;
 	}



 	/**
 	 * Flip card back down and add style 	 *
   * @param  {type} prev 1st card on list
   * @param  {type} curr 2nd card of list
 	 */
 	function notMatch(prev,curr) {
 		setTimeout(function () {
      prev.classList.add('shake');
      curr.classList.add('shake');
      prev.classList.remove('open','show');
			curr.classList.remove('open','show');
    }, 300);
 	}


  /**
   * Increment moves by 1
   */
  function incrementMoves() {
    setMoves();
  }



 /**
  * Add currently clicked card to openCards list
  * @param  {type} c clicked card
  */
 function addToOpenCards(c) {
   openCards.push(c);
 }


 /**
  * Shows card symbol
  * @param  {type} event clicked card
  */
 function showCard(event) {
   event.target.classList.add('open','show');
 }


 /**
  * Start the timer
  * Store timer in a temporary variable
  */
 function startTimer() {
   timer = setInterval(buildTimer,1000);
 }


 /**
  * Pre-increment seconds on every time function is called
  * Calculate minute and second and store in variables
  * Format time in 00:00 and set it in variable
  * Show final formatted time to time-counter on webpage
  */
 function buildTimer() {
   ++sec;
   min = Math.floor(sec / 60);
   sec = Math.floor(sec % 60);
   timerText = pad(min) + ":" + pad(sec);
   timeCounter.innerHTML = timerText;
 }


 /**
  * Pad the time in 00 format
  * Convert time value to string
  * If digit is less than 2, add 0 infront
  * @param  {type} value time value
  * @return {type} string expression of time value
  */
 function pad(value) {
   var string = value + "";
   if(string.length < 2) {
     return "0" + string;
   }
   else return string;
 }


  /**
   * Stops timer from running
   * Clears minute,second, and time string
   */
  function stopTimer() {
    clearInterval(timer);
    sec = 0;
    min = 0;
    timerText = '';
  }

  /**
   * Stop timer from running
   */
  function endGame() {
    stopTimer();
    setTimeout(function(){
      alert('게임 끝!')
    }, 500);
  }


  /**
   * Reset everything
   * Event - when "Restart" is clicked
   * Call to shuffle and set cards to deck
   * Call to reinitialize temporary variables
   */
  function resetGame() {
    setDeck();
    reInit();
  }


  /**
   * Reinitialize moves and match numbers
   * Reset move and timer text on webpage
   */
  function reInit() {
    movesCounter.innerHTML = '';
    timeCounter.innerHTML = '';
    moves = 0;
    match = 0;
    timerDelay = 0;
  }


  /**
   * Restart the game by resetting everything
   * Event - when "Play Again" is clicked
   */
  function restartGame() {
    this.classList.add('active');
    stopTimer();
    reInit();
    setDeck();
    setTimeout(function(){
      restart.classList.remove('active')
    },2900)
  }

 function shuffle(array) {
     var currentIndex = array.length, temporaryValue, randomIndex;

     while (currentIndex !== 0) {
         randomIndex = Math.floor(Math.random() * currentIndex);
         currentIndex -= 1;
         temporaryValue = array[currentIndex];
         array[currentIndex] = array[randomIndex];
         array[randomIndex] = temporaryValue;
     }

     return array;
 }
    </script>

</body>
</html>
